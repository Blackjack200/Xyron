// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.2
// source: xchange.proto

package xyron

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnticheatClient is the client API for Anticheat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnticheatClient interface {
	AddPlayer(ctx context.Context, in *AddPlayerRequest, opts ...grpc.CallOption) (*PlayerReceipt, error)
	RemovePlayer(ctx context.Context, in *PlayerReceipt, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Report(ctx context.Context, in *PlayerReport, opts ...grpc.CallOption) (*JudgementData, error)
}

type anticheatClient struct {
	cc grpc.ClientConnInterface
}

func NewAnticheatClient(cc grpc.ClientConnInterface) AnticheatClient {
	return &anticheatClient{cc}
}

func (c *anticheatClient) AddPlayer(ctx context.Context, in *AddPlayerRequest, opts ...grpc.CallOption) (*PlayerReceipt, error) {
	out := new(PlayerReceipt)
	err := c.cc.Invoke(ctx, "/xchange.Anticheat/AddPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anticheatClient) RemovePlayer(ctx context.Context, in *PlayerReceipt, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/xchange.Anticheat/RemovePlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anticheatClient) Report(ctx context.Context, in *PlayerReport, opts ...grpc.CallOption) (*JudgementData, error) {
	out := new(JudgementData)
	err := c.cc.Invoke(ctx, "/xchange.Anticheat/Report", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnticheatServer is the server API for Anticheat service.
// All implementations must embed UnimplementedAnticheatServer
// for forward compatibility
type AnticheatServer interface {
	AddPlayer(context.Context, *AddPlayerRequest) (*PlayerReceipt, error)
	RemovePlayer(context.Context, *PlayerReceipt) (*emptypb.Empty, error)
	Report(context.Context, *PlayerReport) (*JudgementData, error)
	mustEmbedUnimplementedAnticheatServer()
}

// UnimplementedAnticheatServer must be embedded to have forward compatible implementations.
type UnimplementedAnticheatServer struct {
}

func (UnimplementedAnticheatServer) AddPlayer(context.Context, *AddPlayerRequest) (*PlayerReceipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPlayer not implemented")
}
func (UnimplementedAnticheatServer) RemovePlayer(context.Context, *PlayerReceipt) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePlayer not implemented")
}
func (UnimplementedAnticheatServer) Report(context.Context, *PlayerReport) (*JudgementData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Report not implemented")
}
func (UnimplementedAnticheatServer) mustEmbedUnimplementedAnticheatServer() {}

// UnsafeAnticheatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnticheatServer will
// result in compilation errors.
type UnsafeAnticheatServer interface {
	mustEmbedUnimplementedAnticheatServer()
}

func RegisterAnticheatServer(s grpc.ServiceRegistrar, srv AnticheatServer) {
	s.RegisterService(&Anticheat_ServiceDesc, srv)
}

func _Anticheat_AddPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnticheatServer).AddPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xchange.Anticheat/AddPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnticheatServer).AddPlayer(ctx, req.(*AddPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Anticheat_RemovePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerReceipt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnticheatServer).RemovePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xchange.Anticheat/RemovePlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnticheatServer).RemovePlayer(ctx, req.(*PlayerReceipt))
	}
	return interceptor(ctx, in, info, handler)
}

func _Anticheat_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnticheatServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xchange.Anticheat/Report",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnticheatServer).Report(ctx, req.(*PlayerReport))
	}
	return interceptor(ctx, in, info, handler)
}

// Anticheat_ServiceDesc is the grpc.ServiceDesc for Anticheat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Anticheat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xchange.Anticheat",
	HandlerType: (*AnticheatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPlayer",
			Handler:    _Anticheat_AddPlayer_Handler,
		},
		{
			MethodName: "RemovePlayer",
			Handler:    _Anticheat_RemovePlayer_Handler,
		},
		{
			MethodName: "Report",
			Handler:    _Anticheat_Report_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "xchange.proto",
}
